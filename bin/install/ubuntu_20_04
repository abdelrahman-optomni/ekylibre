#!/bin/bash

# This script is a way to set up or update your development environment automatically for Ubuntu 20.04.

# Exit if any subcommand fails
set -e

LIST_OF_20_04_DEPENDENCIES="git curl build-essential make libreadline-dev libssl-dev zlib1g-dev imagemagick graphicsmagick libproj-dev libgeos-dev libffi-dev libgeos++-dev libpq-dev tesseract-ocr pdftk"
echo "Setup process for Ubuntu 20.04"
echo "🚚 Installing packages..."
sudo apt-get install -qq -y $LIST_OF_20_04_DEPENDENCIES
echo "✅ Packages installed"

# Set RUBY_VERSION to default value if empty
DIR_RBENV=$HOME/.rbenv
if [ -d "$DIR_RBENV" ];
then
    echo "✅ Rbenv directory exist"
else
  echo "🚚 Installing Rbenv..."
  git clone https://github.com/rbenv/rbenv.git $HOME/.rbenv
  git clone https://github.com/rbenv/ruby-build.git $HOME/.rbenv/plugins/ruby-build
  git -C $HOME/.rbenv/plugins/ruby-build pull
  echo 'export PATH="$HOME/.rbenv/bin:$PATH"' >> $HOME/.bashrc
  echo 'eval "$(rbenv init -)"' >> $HOME/.bashrc
  . ~/.bashrc
  rbenv rehash
fi

RUBY_VERSION="2.6.6"
# Install ruby version if not already
if rbenv versions | grep -q $RUBY_VERSION; then
  echo "✅ Ruby version $RUBY_VERSION is already installed."
else
  echo "✨ Ruby version $RUBY_VERSION is not installed. Installing..."
  rbenv install $RUBY_VERSION
  rbenv rehash
  rbenv global $RUBY_VERSION
  echo "✅ Ruby version $RUBY_VERSION installed."
fi

# Install nvm
echo "🚚 Installing Node.js..."
curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.35.3/install.sh | bash
export NVM_DIR="$([ -z "${XDG_CONFIG_HOME-}" ] && printf %s "${HOME}/.nvm" || printf %s "${XDG_CONFIG_HOME}/nvm")"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh" # This loads nvm
nvm install 14.17.4
nvm alias default 14.17.4
npm i -g yarn
echo "✅ Node.js installed."

DIR_POSTGRES=/etc/postgresql/13
if [ -d "$DIR_POSTGRES" ];
then
    echo "✅ Postgresql 13 directory exist"
else
  # Configure PostGres
  echo "🚚 Installing Postgresql && Postgis..."
  sudo sh -c 'echo "deb http://apt.postgresql.org/pub/repos/apt $(lsb_release -cs)-pgdg main" > /etc/apt/sources.list.d/pgdg.list'
  wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo apt-key add -
  sudo apt-get update
  sudo apt-get install -qq -y postgresql-13 postgresql-13-postgis-2.5 postgresql-13-postgis-2.5-scripts
  echo "✅ Postgresql 13 && Postgis 2.5 installed."
  # sudo -su postgres
  # createuser -d -P -s ekylibre
  sudo -u postgres bash -c "psql -c \"CREATE USER ekylibre WITH PASSWORD 'ekylibre';\""
  # psql -c \"CREATE USER ekylibre WITH PASSWORD 'ekylibre';\"
  # psql -c \"ALTER USER ekylibre SUPERUSER; \"
  # echo "ALTER USER ekylibre SUPERUSER;" | psql
  sudo -u postgres bash -c "psql -c \"ALTER USER ekylibre SUPERUSER;\""

  # TODO : Edit pg_hba.conf to use md5 password authentication instead of peer authentication for unix sockets
  # Find and replace in file (local   all  all  peer) by (local  all  all md5)
  # sudo vim /etc/postgresql/13/main/pg_hba.conf
  echo "🛠️ Editing pg_hba.conf"
  file="/etc/postgresql/13/main/pg_hba.conf"
  sed -i  '/^local all all peer/ s/peer/md5/' $file
  echo "✅ Postgresql 13 setup OK."
fi

# replace Proj version with version working with Rgeo
# PROJ_VERSION=pkg-config --modversion proj
echo "🚚 Configuring Proj specific version ..."
sudo mkdir -p /opt/proj/share
sudo tar -xvzf bin/install/proj.tar.gz -C /opt/proj/share
echo "✅ Proj specific version installed."

# Java & Redis
echo "🚚 Installing Qt4, Java && Redis ..."
QT_PPA="ppa:rock-core/qt4"
if ! grep -q "^deb .*$QT_PPA" /etc/apt/sources.list /etc/apt/sources.list.d/*; then
  sudo add-apt-repository ppa:rock-core/qt4
  sudo apt-get update
fi
sudo apt-get install -qq -y libqtcore4 openjdk-8-jdk libqtwebkit-dev libicu-dev libqtcore4 redis-server

# Java & Redis
echo 'export JAVA_HOME=/usr/lib/jvm/java-8-openjdk-amd64' >> $HOME/.bashrc
echo 'export JAVA_HOME=/usr/lib/jvm/java-8-openjdk-amd64' >> $HOME/.profile
. ~/.bashrc
. ~/.profile
echo "✅ Qt4, Java && Redis installed."
