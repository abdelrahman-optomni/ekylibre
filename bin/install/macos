#!/bin/bash

# This script is a way to set up or update your development environment automatically for Ubuntu 20.04.

# Exit if any subcommand fails
set -e

echo "🔍 Check if Homebrew is present..."
if command -v brew &> /dev/null
then
  echo "✅ Homebrew is already installed."
else
  echo "✨ Installing Homebrew..."
  /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
fi
# Assuming that git and curl are already installed
echo "🚚 Installing formulæ..."
brew bundle --file=- <<-EOS
  brew "rbenv"
  brew "ruby-build"
  brew "postgresql@14"
  brew "postgis"
  brew "libpq"
  brew "libxml2"
  brew "redis"
  brew "yarn"
  brew "proj"
  brew "geos"
  brew "imagemagick"
  brew "tesseract"
  brew "icu4c"
  brew "node@14"
EOS
brew link --overwrite node@14

RUBY_VERSION="2.6.6"
# Install ruby version if not already
if rbenv versions | grep -q $RUBY_VERSION; then
  echo "✅ Ruby version $RUBY_VERSION is already installed."
else
  echo "✨ Ruby version $RUBY_VERSION is not installed. Installing..."
  rbenv install $RUBY_VERSION
  rbenv global $RUBY_VERSION
fi

# Get bundler version from Gemfile.lock and install it if it's not already installed
BUNDLER_VERSION=$(grep -A 1 "BUNDLED WITH" Gemfile.lock | tail -n 1 | tr -d ' ')
if gem list bundler -i -v $BUNDLER_VERSION; then
  echo "✅ Bundler version $BUNDLER_VERSION is already installed."
else
  echo "✨ Bundler version $BUNDLER_VERSION is not installed. Installing..."
  gem install bundler:$BUNDLER_VERSION --conservative
fi

# Install nvm
echo "🚚 Installing Node.js ..."
curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.35.3/install.sh | bash
export NVM_DIR="$([ -z "${XDG_CONFIG_HOME-}" ] && printf %s "${HOME}/.nvm" || printf %s "${XDG_CONFIG_HOME}/nvm")"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh" # This loads nvm
nvm install 14.17.4
nvm alias default 14.17.4
npm i -g yarn

# Configure PostGres
sudo apt-get update
sudo sh -c 'echo "deb http://apt.postgresql.org/pub/repos/apt $(lsb_release -cs)-pgdg main" > /etc/apt/sources.list.d/pgdg.list'
wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo apt-key add -

sudo apt install postgresql-13 postgresql-13-postgis-2.5 postgresql-13-postgis-2.5-scripts
# sudo -su postgres
# createuser -d -P -s ekylibre
sudo -u postgres bash -c "psql -c \"CREATE USER ekylibre WITH PASSWORD 'ekylibre';\""
# psql -c \"CREATE USER ekylibre WITH PASSWORD 'ekylibre';\"
# psql -c \"ALTER USER ekylibre SUPERUSER; \"
# echo "ALTER USER ekylibre SUPERUSER;" | psql
sudo -u postgres bash -c "psql -c \"ALTER USER ekylibre SUPERUSER;\""

# TODO : Edit pg_hba.conf to use md5 password authentication instead of peer authentication for unix sockets
# Find and replace in file (local   all  all  peer) by (local  all  all md5)
# sudo vim /etc/postgresql/13/main/pg_hba.conf
echo "Editing pg_hba.conf"
file="/etc/postgresql/13/main/pg_hba.conf"
search="local   all  all  peer"
replace="local  all  all md5"

while read -r line; do
  if [[ $line = $search ]]; then
    echo $replace
  else
    echo $line
  fi
done < "$file" | sudo tee "$file" > /dev/null

# Java & Redis
echo "Installing Java & Redis ..."
sudo add-apt-repository ppa:rock-core/qt4
sudo apt-get update
sudo apt-get install libqtwebkit-dev libicu-dev libqtcore4

# Java & Redis
echo 'export JAVA_HOME=/usr/lib/jvm/java-8-openjdk-amd64' >> ~/.bashrc
echo 'export JAVA_HOME=/usr/lib/jvm/java-8-openjdk-amd64' >> ~/.profile
source ~/.bashrc
source ~/.profile
