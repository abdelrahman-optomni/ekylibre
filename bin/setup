#!/bin/bash

# This script is a way to set up or update your development environment automatically.
# This script is idempotent, so that you can run it at any time and get an expectable outcome.
# Add necessary setup steps to this file.

# Exit if any subcommand fails
set -e

SKIP_DEMO=false

# Detect if arguments includes option --no-demo to skip demo first run
if [[ " $@ " =~ " --skip-demo " ]]; then
  SKIP_DEMO=true
fi

# Install OS-specific packages for MacOS, Debian, and Ubuntu
if [[ "$OSTYPE" == "darwin"* ]]; then
  # Mac OSX
  echo "🔍 Check if Homebrew is present..."
  if command -v brew &> /dev/null
  then
    echo "✅ Homebrew is already installed."
  else
    echo "✨ Installing Homebrew..."
    /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
  fi
  # Assuming that git and curl are already installed
  echo "🚚 Installing formulæ..."
  brew bundle --file=- <<-EOS
    brew "rbenv"
    brew "ruby-build"
    brew "postgresql@14"
    brew "postgis"
    brew "libpq"
    brew "libxml2"
    brew "redis"
    brew "yarn"
    brew "proj"
    brew "geos"
    brew "imagemagick"
    brew "tesseract"
    brew "icu4c"
    brew "node@14"
EOS
  brew link --overwrite node@14
  bundle config build.rgeo --with-geos-dir=$(brew --prefix geos) --with-proj-dir=$(brew --prefix proj)

elif [[ "$OSTYPE" == "linux-gnu"* ]]; then
  # Linux
  echo "🚚 Installing packages..."
  sudo apt-get install -y git curl rbenv ruby-build postgresql postgis redis yarn proj geos imagemagick graphicsmagick tesseract-ocr
  # Not tested, maybe it could depend on the distro
else
  echo "Unsupported OS. Cannot install dependencies for $OSTYPE."
fi

# Get ruby version from .ruby-version and install it if it's not already installed
RUBY_VERSION=$(cat .ruby-version)
# Set RUBY_VERSION to default value if empty
RUBY_VERSION=${RUBY_VERSION:-2.7.7}
# Install ruby version if not already
if rbenv versions | grep -q $RUBY_VERSION; then
  echo "✅ Ruby version $RUBY_VERSION is already installed."
else
  echo "✨ Ruby version $RUBY_VERSION is not installed. Installing..."
  rbenv install $RUBY_VERSION
fi
rbenv local $RUBY_VERSION

# Get bundler version from Gemfile.lock and install it if it's not already installed
BUNDLER_VERSION=$(grep -A 1 "BUNDLED WITH" Gemfile.lock | tail -n 1 | tr -d ' ')
if gem list bundler -i -v $BUNDLER_VERSION; then
  echo "✅ Bundler version $BUNDLER_VERSION is already installed."
else
  echo "✨ Bundler version $BUNDLER_VERSION is not installed. Installing..."
  gem install bundler:$BUNDLER_VERSION --conservative
fi

# Install gems
echo "🚚 Installing gems..."
bundle install --jobs=4

# Install JS packages
echo "🚚 Installing JS packages..."
yarn install

# Copy .env if it doesn't exist
if [ ! -f .env ]; then
  echo "🛠️ Copying .env..."
  cp .env.dist .env
fi

# Copy database.yml if it doesn't exist
if [ ! -f config/database.yml ]; then
  echo "🛠️ Creating config/database.yml..."
  echo "# Generated by bin/setup" > config/database.yml
  echo "development: &development" >> config/database.yml
  echo "  adapter: postgis" >> config/database.yml
  echo "  encoding: unicode" >> config/database.yml
  echo "  database: ekylibre_development" >> config/database.yml
  echo "  pool: 10" >> config/database.yml
  echo "  postgis_extension: []" >> config/database.yml
  echo "  schema_search_path: public,postgis,lexicon" >> config/database.yml
  echo "test:" >> config/database.yml
  echo "  <<: *development" >> config/database.yml
  echo "  database: ekylibre_test<%= ENV['TEST_ENV_NUMBER'] %>" >> config/database.yml
fi

# Get database name from config/database.yml
DATABASE_NAME=$(ruby -ryaml -e "puts YAML.load_file('config/database.yml')['development']['database']")

# If postgresql database exists, migrate only DB schema else setup it.
if psql -lqt | cut -d \| -f 1 | grep -qw $DATABASE_NAME; then
  echo "⚙️ Migrating database schema..."
  bin/rails db:migrate
else
  echo "⚙️ Creating database..."
  bin/rails db:create db:migrate
fi

# Load lexicon
echo "⚙️ Loading lexicon..."
export MINIO_HOST=https://io.ekylibre.tech/
export MINIO_ACCESS_KEY=ekylibre
export MINIO_SECRET_KEY=Gandi2021%
bin/rails lexicon:load

# Load demo first run unless SKIP_DEMO is true
if [ "$SKIP_DEMO" = true ] ; then
  echo "⚙️ Skipping demo first run"
else
  DEMO=${DEMO:-demo}
  # Prepare first run for development unless it already exists
  if [ -d db/first_runs ]; then
    echo "⚙️ First run for development already exists."
  else
    echo "⚙️ Pull first run for development..."
    # mkdir -p db/first_runs
    git clone git@github.com:ekylibre/first_run-demo.git db/first_runs
  fi

  # Load demo first run unless schema is not present in database
  if psql -At -c 'SELECT nspname FROM pg_catalog.pg_namespace;' | grep -q ${DEMO}; then
    echo "⚙️ Demo first run already loaded."
  else
    echo "⚙️ Execute demo first run for development..."
    export TENANT=${DEMO}
    bin/rails first_run
    unset TENANT
    # Unless the domain is already in /etc/hosts, add it
    if grep -q "${DEMO}.ekylibre.lan" /etc/hosts; then
      echo "⚙️ ${DEMO}.ekylibre.lan is already in /etc/hosts."
    else
      echo "⚙️ Add ${DEMO}.ekylibre.lan to /etc/hosts..."
      echo "127.0.0.1 ${DEMO}.ekylibre.lan" | sudo tee --append /etc/host
    fi
  fi
fi

# Remove old logs and tempfiles
echo "⚙️ Removing old logs and tempfiles..."
bin/rails log:clear tmp:clear

# Restart the application server
echo "⚙️ Restarting application server..."
bin/rails restart
