- item ||= f.object

.form-field.role-row.role-row--non-merchandise
  .item-block-role.item-block-role--purchase-order
    :ruby
      options = {
        label: f.object.role.tl,
        source: {scope: {purchaseables_services: true, active: true}},
        input_html: {
          class: "order-variant",
          data: {
            variant_of_deal_item: {
              url: backend_product_nature_variant_path("RECORD_ID", format: :json),
              scope: 'unit'
            },
            required: true,
            parent: '.item-form',
            filter_unroll: "[data-selector-id='purchase_item_conditioning_unit_id']"
          }
        },
        required: true,
      }
    = f.referenced_association(:variant, **options)
    .annotation-logo
      - if f.object.annotation.blank?
        = link_to("#", data: { annotate: ".annotate", use_closest: "tbody" }, title: :add_annotation.tl) do
          %i.annotation-field

  .item-block-quantity
    .storing-fields
      .storing-calculation
        .storing-conditionning
          = f.referenced_association :conditioning_unit, class: "order-conditionning", input_html: { data: { filters_url: unroll_filters_by_catalog_items_backend_units_path, conditioning_data_url: conditioning_data_backend_units_path, variant_selector: 'input.order-variant', required: true } }, new: { controller: :conditionings, action: :new_on_the_go }

        .storing-quantifier
          = f.input :conditioning_quantity, wrapper: :append do
            = f.input_field :conditioning_quantity, class: "order-quantity", placeholder: '0', size: 7, data: { trade_component: "quantity", required: true }

      .current-stock
        .merchandise-current-stock
          %span.stock-label= :current_stock.tl
          %span.stock-value= f.object.decorate.merchandise_current_stock
          %span.stock-unit= f.object.decorate.merchandise_stock_unit
        .merchandise-stock-after-purchase
          %span.stock-label= :stock_after_order.tl
          %span.stock-value= f.object.decorate.merchandise_stock_after_order
          %span.stock-unit= f.object.decorate.merchandise_stock_unit

.annotation-section
  .annotation-field
    - attrs = {}
    - attrs[:style] = "display: none" if f.object.annotation.blank?
    .annotate{attrs}= f.input(:annotation, wrapper: :nested, input_html: { class: "annotation" })
