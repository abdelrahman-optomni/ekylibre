- variant = f.object.variant
- conditioning_coefficient = f.object.conditioning_unit && variant ? UnitComputation.convert_into_variant_unit(variant, 1, f.object.conditioning_unit) : nil
- conditioning_unit = f.object.conditioning_unit ? f.object.conditioning_unit.name : nil

.item-block.role-row.role-row--non-merchandise
  .item-block-role
    :ruby
      options = {
        label: f.object.role.tl,
        source: {scope: {purchaseables_services: true, active: true}},
        input_html: {
          class: "parcel-item-variant",
          disabled: params[:mode] == 'prefilled',
          data: {
            product_of_delivery_item: {
              url: backend_product_nature_variant_path("RECORD_ID", format: :json),
              scope: 'target'
            },
            required: true,
            parent: '.item-form',
            filter_unroll: "[data-selector-id='reception_item_conditioning_unit_id']"
          }
        }
      }
    = f.referenced_association(:variant, **options)
    .annotation-logo
      - if f.object.annotation.blank?
        = link_to("#", data: { annotate: ".annotate", use_closest: "tbody" }, title: :add_annotation.tl) do
          %i.annotation-field

  .storing-calculation
    .storing-conditionning
      = f.referenced_association :conditioning_unit, input_html: { class: 'reception-conditionning', disabled: params[:mode] == 'prefilled', data: { filters_url: unroll_filters_by_catalog_items_backend_units_path, conditioning_data_url: conditioning_data_backend_units_path, variant_selector: 'input.parcel-item-variant', coefficient: conditioning_coefficient, interpolate_data_attribute: conditioning_unit,required: true } }, new: { controller: :conditionings, action: :new_on_the_go }

    .storing-quantifier
      = f.input :conditioning_quantity, wrapper: :append do
        = f.input_field :conditioning_quantity, class: "reception-quantity", placeholder: '0', size: 7, data: { trade_component: "quantity", required: true }

.annotation-section
  .annotation-field
    - attrs = {}
    - attrs[:style] = "display: none" if f.object.annotation.blank?
    .annotate{attrs}= f.input(:annotation, wrapper: :nested, input_html: { class: "annotation" })
