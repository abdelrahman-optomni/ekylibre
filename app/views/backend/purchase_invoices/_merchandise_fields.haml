- item ||= f.object

.form-field.role-row.role-row--merchandise
  .item-block-role.item-block-role--purchase-invoice
    .variant-information--mandatory
      :ruby
        options = {
          label: :merchandise.tl,
          source: {scope: :purchaseables_stockables_or_depreciables},
          input_html: {
            class: "invoice-variant",
            disabled: params[:mode] == 'prefilled',
            data: {
              variant_of_deal_item: {
                url: detail_backend_product_nature_variant_path("RECORD_ID", mode: :last_purchase_item)
              },
              product_of_delivery_item: {
                url: backend_product_nature_variant_path("RECORD_ID", format: :json)
              },
              required: true,
              parent: '.item-form',
              filter_unroll: "[data-selector-id='purchase_item_conditioning_unit_id']"
            }
          }
        }
        options[:input_html][:data][:lazy_loading_variant_id] = locals[:lazy_loading_variant_id] if (defined?(locals) && locals[:lazy_loading_variant_id])

      = f.referenced_association(:variant, **options)

      .annotation-logo
        - if f.object.annotation.blank?
          = link_to("#", data: { annotate: ".annotate", use_closest: "tbody" }, title: :add_annotation.tl) do
            %i.annotation-field

    .variant-information--optional
      - supplier_ref_value = f.object.decorate.reception_number
      - classes = 'supplier-ref-block'
      - classes << ' hidden' if supplier_ref_value.blank?

      %div{ class: classes }
        %span.supplier-ref-label= "#{ :reception_number.tl } : "
        %span.supplier-ref-value= supplier_ref_value

      - display = ""
      - display = "display: none;" unless item && item.variant && item.variant.depreciable?
      .fixed-asset-fields{style: display, data: {"when-item": "depreciable", "when-display-value": 'true'}}
        = f.input :fixed

        - display = "display: none;" unless item.fixed
        .assets{style: display}
          = f.input :preexisting_asset, label: :asset_exists.tl

          - display_existing_asset = "display: none;" unless item.preexisting_asset
          .existing_asset{style: display_existing_asset}
            = f.referenced_association :fixed_asset, source: :drafts

          - display_new_asset = "display: none;" if item.preexisting_asset
          .new_asset{style: display_new_asset}
            = f.referenced_association(:depreciable_product, new: false)

  .item-block-quantity
    .storing-fields
      .storing-calculation
        .storing-conditionning
          = f.referenced_association :conditioning_unit, input_html: { class: 'invoice-conditioning', disabled: params[:mode] == 'prefilled', data: { filters_url: unroll_filters_by_catalog_items_backend_units_path, conditioning_data_url: conditioning_data_backend_units_path, variant_selector: 'input.invoice-variant', required: true } }, new: { controller: :conditionings, action: :new_on_the_go }

        .storing-quantifier
          = f.input :conditioning_quantity, wrapper: :append do
            = f.input_field :conditioning_quantity, class: "invoice-quantity", placeholder: '0', size: 7, data: { trade_component: "quantity", required: true }

      .current-stock
        .merchandise-current-stock
          %span.stock-label= :current_stock.tl
          %span.stock-value= f.object.decorate.merchandise_current_stock
          %span.stock-unit= f.object.decorate.merchandise_stock_unit

.annotation-section
  .annotation-field
    - attrs = {}
    - attrs[:style] = "display: none" if f.object.annotation.blank?
    .annotate{attrs}= f.input(:annotation, wrapper: :nested, input_html: { class: "annotation" })
